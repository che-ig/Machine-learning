[tool.poetry]
name = "poetry_temp"
version = "0.1.0"
description = ""
authors = ["chernov.ig <che_test@test>"]
package-mode = false

[tool.poetry.dependencies]
python = ">=3.9"
numpy = "^2.0"
pandas = "^2.2"
matplotlib = "^3.5.1"
scikit-learn = "^1.0.2"
scipy = "^1.8.0"
ipykernel = "^6.13.0"
seaborn = "^0.12.0"
sympy = "^1.11.1"
simpy = "^4.1.1"

[tool.black]
line-length = 100
extend-exclude = '''
(
  .vscode
)
'''

[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3
skip_gitignore = true

[tool.mypy]
#mypy_path = "./src"

# Этот флаг регулирует то, как mypy следует за импортированными модулями, 
# которые не были явно переданы через командную строку.
follow_imports = "silent"

# Эффективно отключает проверку необязательных типов и значений None.
strict_optional = true

# Этот флаг заставит mypy сообщать об ошибке всякий раз, когда в 
# вашем коде используются ненужные затраты, которые можно безопасно удалить.
warn_redundant_casts = true

# Этот флаг, наряду с флагом --warn-redundant-casts, особенно полезен при обновлении mypy.
warn_unused_ignores = true

# Disallows usage of generic types that do not specify explicit type parameters.
disallow_any_generics = true

# Type-checks the interior of functions without type annotations.
check_untyped_defs = true

# For example, it would report an error for def f(a, b) and def f(a: int, b)
disallow_untyped_defs = true

# This flag changes the behavior to not re-export unless the item
# is imported using from-as or is included in __all__.
no_implicit_reexport = true

#[mypy-pyproj.*]
# use for dependencies that don't have typing stubs
ignore_missing_imports = true

#pythonpath = "src"

[tool.poetry.dev-dependencies]
pytest = "^5.2"

[tool.poetry.group.dev.dependencies]
flake8 = "^7.1.0"
mypy = "^1.10.1"
black = "^24.4.2"
isort = "^5.13.2"
pre-commit = "^3.7.1"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"
