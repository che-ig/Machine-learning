import matplotlib.pyplot as plt
import numpy as np

# imshow - картинки.

# Простейший случай - массив пикселей.
# Каждое число в массиве соответствует определенному цвету из встроенной палитры.
# Как правило числа, должны находиться в интервале [0, 1]. Если указать целые
# числа, то все они будут автоматически нормализованы и приведены к данному
# интервалу.
smile = [
    [0, 0, 1, 1, 1, 1, 1, 1, 0, 0],
    [0, 1, 0, 0, 0, 0, 0, 0, 1, 0],
    [1, 0, 0, 0, 0, 0, 0, 0, 0, 1],
    [1, 0, 0, 1, 0, 0, 1, 0, 0, 1],
    [1, 0, 0, 0, 0, 0, 0, 0, 0, 1],
    [1, 0, 0, 0, 0, 0, 0, 0, 0, 1],
    [1, 0, 1, 0, 0, 0, 0, 1, 0, 1],
    [1, 0, 0, 1, 1, 1, 1, 0, 0, 1],
    [0, 1, 0, 0, 0, 0, 0, 0, 1, 0],
    [0, 0, 1, 1, 1, 1, 1, 1, 0, 0],
]

fig, ax = plt.subplots()
ax.imshow(smile)

fig.set(figwidth=6, figheight=6)

#################

data_int = np.arange(0, 256).reshape(16, 16)
data_float = np.linspace(0, 1, 256).reshape(16, 16)
fig_2, ax_2 = plt.subplots(1, 2)

ax_2[0].imshow(data_int)
ax_2[0].set(title="Цвет указан целыми числами")

ax_2[1].imshow(data_float)
ax_2[1].set(title="Цвет указан вещественными числами")

fig_2.set(figwidth=12, figheight=6)

##################
# Может быть полезно отобразить график некоторой трехмерной функции z = f(x, y)
# на котором каждому значению z соответствует отпределенный цвет.
a, b = np.mgrid[-5 * np.pi : 5 * np.pi : 1000j, -5 * np.pi : 5 * np.pi : 1000j]
z = np.sin(a) + np.cos(b)
fig_3, ax_3 = plt.subplots()
ax_3.imshow(z)
fig_3.set(figwidth=12, figheight=12)

# Здесь я не проводил эксперимент с картинками.
plt.show()
